import os
import logging
import telebot
import csv
from telebot import types
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levellevel)s - %(message)s')
logger = logging.getLogger(__name__)

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '7322233778:AAHxgxNC_6dRnsJJeXhlyyw4ajBPu4ELUEk'
bot = telebot.TeleBot(API_TOKEN)

# –ü–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_FOLDER = 'images'
ANNOTATED_IMAGE_FOLDER = 'annotated_images'
CSV_FILE_PATH = 'weld_defects.csv'
WEB_APP_URL = 'http://maltesers.pythonanywhere.com/draw.html?image='

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(IMAGE_FOLDER, exist_ok=True)
os.makedirs(ANNOTATED_IMAGE_FOLDER, exist_ok=True)

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ CSV —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(CSV_FILE_PATH):
    with open(CSV_FILE_PATH, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = [
            '–§–ò–û',
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
            '–í–∏–¥ —Å–≤–∞—Ä–∫–∏',
            '–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
            '–ú–∞—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
            '–î–∏–∞–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
            '–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
            '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–∫–∏',
            '–°–∏–ª–∞ —Ç–æ–∫–∞',
            '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            '–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        ]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–∞—Ä–∫–µ
STATE_NONE = 0
STATE_WAITING_FOR_FIO = 1
STATE_WAITING_FOR_POSITION = 2
STATE_WAITING_FOR_COMMAND = 3
STATE_WAITING_FOR_SET_WELDING_PARAMS = 4
STATE_WAITING_FOR_IMAGE = 5
STATE_WAITING_FOR_DRAWN_IMAGE = 6

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–≤–∞—Ä–∫–∏
STATE_WAITING_FOR_WELDING_TYPE = 10
STATE_WAITING_FOR_COVERAGE_TYPE = 11
STATE_WAITING_FOR_ELECTRODE_BRAND = 12
STATE_WAITING_FOR_ELECTRODE_DIAMETER = 13
STATE_WAITING_FOR_CONNECTION_TYPE = 14
STATE_WAITING_FOR_WELDING_POSITION = 15
STATE_WAITING_FOR_CURRENT = 16

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìô About"),
        types.KeyboardButton("üìÑ Types"),
        types.KeyboardButton("üÜò Help"),
        types.KeyboardButton("‚ÅâÔ∏è FAQ"),
        types.KeyboardButton("üóæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
        types.KeyboardButton("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏")
    )
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_data[message.chat.id] = {"state": STATE_WAITING_FOR_FIO}
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    logger.info(f"User {message.chat.id} started the bot and is asked for FIO.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text in ["üìô About", "üìÑ Types", "üÜò Help", "‚ÅâÔ∏è FAQ", "üóæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏"])
def handle_menu_buttons(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    if message.text == "üìô About":
        bot.send_message(chat_id, "ü§ñ *WeldDefectBot* - —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤...", parse_mode="Markdown")
    elif message.text == "üìÑ Types":
        bot.send_message(chat_id, "–Ø —É–º–µ—é –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∞–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã –∫–∞–∫:...", parse_mode="Markdown")
    elif message.text == "üÜò Help":
        bot.send_message(chat_id, "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞.\n\n–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:...", parse_mode="Markdown")
    elif message.text == "‚ÅâÔ∏è FAQ":
        bot.send_message(chat_id, "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n1. –ö–∞–∫–æ–π —Ç–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞?...", parse_mode="Markdown")
    elif message.text == "üóæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        if "welding_params" in user_data[chat_id]:
            user_data[chat_id]["state"] = STATE_WAITING_FOR_IMAGE
            bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
        else:
            user_data[chat_id]["state"] = STATE_WAITING_FOR_SET_WELDING_PARAMS
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏.")
    elif message.text == "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏":
        user_data[chat_id]["state"] = STATE_WAITING_FOR_WELDING_TYPE
        bot.send_message(chat_id, "–í–∏–¥ —Å–≤–∞—Ä–∫–∏:")
        logger.info(f"User {chat_id} is asked for welding type.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    state = user_data[chat_id].get("state", STATE_NONE)

    if state == STATE_WAITING_FOR_FIO:
        user_data[chat_id]["fio"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_POSITION
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
        logger.info(f"User {chat_id} provided FIO: {message.text}.")
    elif state == STATE_WAITING_FOR_POSITION:
        user_data[chat_id]["position"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_COMMAND
        bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=create_main_menu())
        logger.info(f"User {chat_id} provided position: {message.text}.")
    elif state == STATE_WAITING_FOR_WELDING_TYPE:
        user_data[chat_id].setdefault("welding_params", {})["welding_type"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_COVERAGE_TYPE
        bot.send_message(chat_id, "–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–∫—Ç—Ä–æ–¥–∞:")
        logger.info(f"User {chat_id} provided welding type: {message.text}.")
    elif state == STATE_WAITING_FOR_COVERAGE_TYPE:
        user_data[chat_id]["welding_params"]["coverage_type"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_ELECTRODE_BRAND
        bot.send_message(chat_id, "–ú–∞—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞:")
        logger.info(f"User {chat_id} provided coverage type: {message.text}.")
    elif state == STATE_WAITING_FOR_ELECTRODE_BRAND:
        user_data[chat_id]["welding_params"]["electrode_brand"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_ELECTRODE_DIAMETER
        bot.send_message(chat_id, "–î–∏–∞–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–¥–∞:")
        logger.info(f"User {chat_id} provided electrode brand: {message.text}.")
    elif state == STATE_WAITING_FOR_ELECTRODE_DIAMETER:
        user_data[chat_id]["welding_params"]["electrode_diameter"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_CONNECTION_TYPE
        bot.send_message(chat_id, "–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:")
        logger.info(f"User {chat_id} provided electrode diameter: {message.text}.")
    elif state == STATE_WAITING_FOR_CONNECTION_TYPE:
        user_data[chat_id]["welding_params"]["connection_type"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_WELDING_POSITION
        bot.send_message(chat_id, "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–∫–∏:")
        logger.info(f"User {chat_id} provided connection type: {message.text}.")
    elif state == STATE_WAITING_FOR_WELDING_POSITION:
        user_data[chat_id]["welding_params"]["welding_position"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_CURRENT
        bot.send_message(chat_id, "–°–∏–ª–∞ —Ç–æ–∫–∞:")
        logger.info(f"User {chat_id} provided welding position: {message.text}.")
    elif state == STATE_WAITING_FOR_CURRENT:
        user_data[chat_id]["welding_params"]["current"] = message.text
        user_data[chat_id]["state"] = STATE_WAITING_FOR_COMMAND
        bot.send_message(chat_id, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=create_main_menu())
        logger.info(f"User {chat_id} provided current: {message.text}.")
    elif state == STATE_WAITING_FOR_IMAGE:
        handle_image(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'])
def handle_image(message):
    chat_id = message.chat.id
    state = user_data.get(chat_id, {}).get("state", STATE_NONE)

    if state == STATE_WAITING_FOR_IMAGE:
        try:
            # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            file_path = save_image(file_info, file_id)
            if file_path:
                # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ image_path —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
                if chat_id not in user_data:
                    user_data[chat_id] = {}
                user_data[chat_id]["image_path"] = file_path
                logger.info(f"Image path saved for user {chat_id}: {file_path}")
                print(f"DEBUG: Image path for user {chat_id} is {user_data[chat_id]['image_path']}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_url = f"{WEB_APP_URL}{file_path}"
                bot.send_message(chat_id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤: {image_url}")
                user_data[chat_id]["state"] = STATE_WAITING_FOR_DRAWN_IMAGE
                bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                logger.info(f"Image received and saved as {file_path}. User {chat_id} is asked for annotated image.")
            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                logger.error(f"Failed to save image for user {chat_id}.")
        except Exception as e:
            logger.error(f"Error handling image for user {chat_id}: {e}")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    elif state == STATE_WAITING_FOR_DRAWN_IMAGE:
        handle_annotated_image(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['document', 'photo'])
def handle_annotated_image(message):
    chat_id = message.chat.id
    state = user_data.get(chat_id, {}).get("state", STATE_NONE)

    if state != STATE_WAITING_FOR_DRAWN_IMAGE:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.")
        return

    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π 'image_path'
        logger.info(f"Checking for image_path for user {chat_id}")
        print(f"DEBUG: Checking for image_path for user {chat_id}")

        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ 'image_path' –≤ user_data
        if 'image_path' not in user_data[chat_id]:
            bot.send_message(chat_id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            logger.error(f"No image path found for user {chat_id} when receiving annotated image.")
            print(f"DEBUG: No image path found for user {chat_id} in user_data")
            return

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è 'image_path'
        logger.info(f"Image path for user {chat_id}: {user_data[chat_id]['image_path']}")
        print(f"DEBUG: Image path for user {chat_id}: {user_data[chat_id]['image_path']}")

        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
        file_id = message.photo[-1].file_id if message.content_type == 'photo' else message.document.file_id
        file_info = bot.get_file(file_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        annotated_file_path = save_annotated_image(file_info, user_data[chat_id]["image_path"])
        if annotated_file_path:
            user_data[chat_id]["annotated_image_path"] = annotated_file_path
            bot.send_message(chat_id, "–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
            save_data_to_file(chat_id)
            bot.send_message(chat_id, "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            logger.info(f"Annotated image received and saved as {annotated_file_path} for user {chat_id}.")
            user_data[chat_id]["state"] = STATE_NONE
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            logger.error(f"Failed to save annotated image for user {chat_id}.")
    except Exception as e:
        logger.error(f"Error handling annotated image for user {chat_id}: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def save_image(file_info, file_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        files = os.listdir(IMAGE_FOLDER)
        file_number = len(files) + 1
        file_path = os.path.join(IMAGE_FOLDER, f"{file_number}.jpg")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        logger.info(f"Image saved at path: {file_path}")
        return file_path
    except Exception as e:
        logger.error(f"Error saving image: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def save_annotated_image(file_info, original_image_path):
    try:
        # –ò–∑–º–µ–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è—è —Å—É—Ñ—Ñ–∏–∫—Å "_a" –ø–µ—Ä–µ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        base_name = os.path.basename(original_image_path)
        name, ext = os.path.splitext(base_name)
        annotated_file_path = os.path.join(ANNOTATED_IMAGE_FOLDER, f"{name}_a{ext}")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(annotated_file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        logger.info(f"Annotated image saved at path: {annotated_file_path}")
        return annotated_file_path
    except Exception as e:
        logger.error(f"Error saving annotated image: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
def save_data_to_file(chat_id):
    try:
        data = user_data[chat_id]
        file_path = data.get("image_path", "N/A")
        annotated_image_path = data.get("annotated_image_path", "N/A")
        welding_params = data.get("welding_params", {})

        file_exists = os.path.isfile(CSV_FILE_PATH)

        with open(CSV_FILE_PATH, 'a', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                '–§–ò–û',
                '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
                '–í–∏–¥ —Å–≤–∞—Ä–∫–∏',
                '–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
                '–ú–∞—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
                '–î–∏–∞–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–¥–∞',
                '–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
                '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–∫–∏',
                '–°–∏–ª–∞ —Ç–æ–∫–∞',
                '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                '–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            if not file_exists:
                writer.writeheader()  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

            row = {
                '–§–ò–û': data.get("fio", ""),
                '–î–æ–ª–∂–Ω–æ—Å—Ç—å': data.get("position", ""),
                '–í–∏–¥ —Å–≤–∞—Ä–∫–∏': welding_params.get("welding_type", ""),
                '–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–∫—Ç—Ä–æ–¥–∞': welding_params.get("coverage_type", ""),
                '–ú–∞—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞': welding_params.get("electrode_brand", ""),
                '–î–∏–∞–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–¥–∞': welding_params.get("electrode_diameter", ""),
                '–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è': welding_params.get("connection_type", ""),
                '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–∫–∏': welding_params.get("welding_position", ""),
                '–°–∏–ª–∞ —Ç–æ–∫–∞': welding_params.get("current", ""),
                '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': file_path,
                '–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': annotated_image_path
            }
            writer.writerow(row)

        logger.info(f"Data for user {chat_id} saved to CSV.")
    except Exception as e:
        logger.error(f"Error saving data to file: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def run_bot():
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"Error: {e}")
            bot.stop_polling()
            time.sleep(15)  # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

if __name__ == "__main__":
    run_bot()
